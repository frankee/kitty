// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: add_service.proto

/*
Package add_service is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package add_service

import (
	"io"
	"net/http"

	"github.com/golang/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/utilities"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/status"
)

var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray

// Set collects all of the endpoints that compose an Add service. It's meant to
// be used as a helper struct, to collect all of the endpoints into a single
// parameter.
type AddEndpoints struct {
	SumEndpoint endpoint.Endpoint

	ConcatEndpoint endpoint.Endpoint
}

// New returns a Set that wraps the provided server, and wires in all of the
// expected endpoint middle-wares via the various parameters.
func NewAdd(svc AddServer) AddEndPoints {

	var sumEndpoint endpoint.Endpoint
	{
		sumEndpoint = MakeSumEndpoint(svc)
	}

	var concatEndpoint endpoint.Endpoint
	{
		concatEndpoint = MakeConcatEndpoint(svc)
	}

	return AddEndpoints{

		sumEndpoint: SumEndpoint,

		concatEndpoint: ConcatEndpoint,
	}
}

// Sum implements the service interface, so Set may be used as a service.
// This is primarily useful in the context of a client library.
func (endPoints AddEndPoints) Sum(ctx context.Context, request *SumRequest) (*SumReply, error) {
	return endPoints.SumEndPoint(ctx, req)
}

// Concat implements the service interface, so Set may be used as a service.
// This is primarily useful in the context of a client library.
func (endPoints AddEndPoints) Concat(ctx context.Context, request *ConcatRequest) (*ConcatReply, error) {
	return endPoints.ConcatEndPoint(ctx, req)
}

// MakeSumEndpoint constructs a Sum endpoint wrapping the service.
func MakeSumEndpoint(s AddServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		return s.Sum(ctx, request)
	}
}

// MakeConcatEndpoint constructs a Concat endpoint wrapping the service.
func MakeConcatEndpoint(s AddServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		return s.Concat(ctx, request)
	}
}
